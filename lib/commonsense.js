// Generated by CoffeeScript 1.6.2
(function() {
  var Sense, exports,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  Sense = (function() {
    function Sense(session_id) {
      this.session_id = session_id != null ? session_id : '';
      this.api_url = 'https://api.sense-os.nl';
    }

    return Sense;

  })();

  Sense.prototype = {
    available_methods: ['GET', 'POST', 'DELETE', 'PUT'],
    _getRequestObject: function() {
      var XMLHttpRequest, e, request;

      if ((typeof window !== "undefined" && window !== null) && (window.XMLHttpRequest != null)) {
        return new window.XMLHttpRequest();
      }
      if ((typeof window !== "undefined" && window !== null) && (window.ActiveXObject != null)) {
        try {
          request = new ActiveXObject('Msxml2.XMLHTTP');
        } catch (_error) {
          e = _error;
          try {
            request = new ActiveXObject('Microsoft.XMLHTTP');
          } catch (_error) {
            e = _error;
          }
        }
      }
      XMLHttpRequest = require('xmlhttprequest').XMLHttpRequest;
      return new XMLHttpRequest();
    },
    _api: function(method, path, data, next) {
      var headers, key, name, str, value, xhr,
        _this = this;

      if (typeof data !== 'object') {
        next = data;
        data = {};
      }
      if (data == null) {
        data = '';
      }
      if (next == null) {
        next = function() {};
      }
      method = method.toUpperCase();
      if (__indexOf.call(this.available_methods, method) < 0) {
        throw new Error("1: Method " + method + " not available");
      }
      if (path[0] !== '/') {
        path = '/' + path;
      }
      headers = {
        ACCEPT: '*'
      };
      if (this.session_id !== '') {
        headers['X-SESSION_ID'] = this.session_id;
      }
      xhr = this._getRequestObject();
      xhr.onreadystatechange = function() {
        var location, res, sid, _ref;

        if (xhr.readyState === 4) {
          res = {
            status: xhr.status,
            data: xhr.responseText,
            object: {}
          };
          location = xhr.getResponseHeader('Location');
          sid = xhr.getResponseHeader('X-SESSION_ID');
          if (sid != null) {
            _this.session_id = sid;
          }
          if (location != null) {
            res.location = location != null;
          }
          if ((_ref = res.status) === 200 || _ref === 201 || _ref === 302) {
            if (res.data.trim() !== '') {
              res.object = JSON.parse(res.data);
            }
            return next(null, res);
          } else {
            return next(new Error("2: API returned non-succesful header."), res);
          }
        }
      };
      switch (method) {
        case 'GET' || 'DELETE':
          str = [];
          for (key in data) {
            value = data[key];
            str.push(encodeURIComponent(key) + "=" + encodeURIComponent(value));
          }
          path += '?' + str.join('&');
          break;
        case 'POST' || 'PUT':
          if (typeof data === "object") {
            headers['Content-Type'] = 'application/json';
            data = JSON.stringify(data);
          } else {
            if (typeof data === "string") {
              headers['Content-Type'] = 'text/plain';
            }
          }
          break;
        default:
          throw new Error("Unrecognized method");
      }
      xhr.open(method, this.api_url + path, true);
      for (name in headers) {
        value = headers[name];
        xhr.setRequestHeader(name, value);
      }
      xhr.send(data);
      return xhr;
    },
    setServer: function(s) {
      if (s == null) {
        s = 'live';
      }
      return this.api_url = (function() {
        switch (s) {
          case 'live':
            return 'https://api.sense-os.nl';
          case 'dev':
            return 'http://api.dev.sense-os.nl';
          default:
            throw new Error('Unrecognized server');
        }
      })();
    },
    getServer: function() {
      return this.api_url;
    },
    createSession: function(u, p, next) {
      return this._api('post', 'login', {
        username: u,
        password: p
      }, next);
    },
    deleteSession: function(data, next) {
      return this._api('post', 'logout', data, next);
    },
    dataProcessors: function(data, next) {
      return this._api('get', 'dataprocessors', data, next);
    },
    dataProcessor: function(id, data, next) {
      return this._api('get', 'dataprocessors/' + id, data, next);
    },
    createDataProcessor: function(data, next) {
      return this._api('post', 'dataprocessors', data, next);
    },
    updateDataProcessor: function(id, data, next) {
      return this._api('put', 'dataprocessors/' + id + '', data, next);
    },
    deleteDataProcessor: function(id, data, next) {
      return this._api('delete', 'dataprocessors/' + id, data, next);
    },
    dataProcessorsFiles: function(data, next) {
      return this._api('get', 'dataprocessors/files');
    },
    dataProcessorFile: function(filename, data, next) {
      return this._api('get', 'dataprocessors/files/' + filename, data, next);
    },
    createDataProcessorsFile: function(filename, data, next) {
      return this._api('post', 'dataprocessors/files/' + filename, data, next);
    },
    updateDataProcessorsFile: function(filename, data, next) {
      return this._api('put', 'dataprocessors/files/' + filename, data, next);
    },
    deleteDataProcessorsFile: function(filename, data, next) {
      return this._api('delete', 'dataprocessors/files/' + filename, data, next);
    },
    devices: function(data, next) {
      return this._api('get', 'devices', data, next);
    },
    device: function(id, data, next) {
      return this._api('get', 'devices/' + id, data, next);
    },
    deviceSensors: function(id, data, next) {
      return this._api('get', 'devices/' + id + '/sensors.json', data, next);
    },
    environments: function(data, next) {
      return this._api('get', 'environments', data, next);
    },
    environment: function(id, data, next) {
      return this._api('get', 'environments/' + id, data, next);
    },
    createEnvironment: function(data, next) {
      return this._api('post', 'environments', data, next);
    },
    updateEnvironment: function(id, data, next) {
      return this._api('put', 'environments/' + id, data, next);
    },
    deleteEnvironment: function(id, data, next) {
      return this._api('delete', 'environments/' + id, data, next);
    },
    environmentSensors: function(id, data, next) {
      return this._api('get', 'environments/' + id + '/sensors', data, next);
    },
    createEnvironmentSensor: function(id, data, next) {
      return this._api('post', 'environments/' + id + '/sensors', data, next);
    },
    deleteEnvironmentSensor: function(id, sensor, next) {
      return this._api('delete', 'environments/', +id + '/sensors/' + sensor, next);
    },
    allGroups: function(data, next) {
      return this._api('get', 'groups/all', data, next);
    },
    groups: function(data, next) {
      return this._api('get', 'groups', data, next);
    },
    group: function(id, data, next) {
      return this._api('get', 'groups/' + id, data, next);
    },
    createGroup: function(data, next) {
      return this._api('post', 'groups', data, next);
    },
    updateGroup: function(id, data, next) {
      return this._api('put', 'groups/' + id, data, next);
    },
    deleteGroup: function(id, data, next) {
      return this._api('delete', 'groups/' + id, data, next);
    },
    groupUsers: function(id, data, next) {
      return this._api('get', 'groups/' + id + '/users', data, next);
    },
    groupUser: function(id, user, next) {
      return this._api('get', 'groups/' + id + '/users/' + user, next);
    },
    createGroupUser: function(id, data, next) {
      return this._api('post', 'groups/' + id + '/users', data, next);
    },
    updateGroupUser: function(id, user, data, next) {
      return this._api('put', 'groups/' + id + '/users/' + user, data, next);
    },
    deleteGroupUser: function(id, user, next) {
      return this._api('delete', 'groups/' + id + '/users/' + user, next);
    },
    groupSensors: function(id, data, next) {
      return this._api('get', 'groups/' + id + '/sensors', data, next);
    },
    createGroupSensor: function(id, data, next) {
      return this._api('post', 'groups/' + id + '/sensors', data, next);
    },
    deleteGroupSensor: function(id, sensor, next) {
      return this._api('delete', 'groups/' + id + '/sensors/' + sensors, next);
    },
    sensors: function(data, next) {
      return this._api('get', 'sensors', data, next);
    },
    sensor: function(id, data, next) {
      return this._api('get', 'sensors/' + id, data, next);
    },
    createSensor: function(data, next) {
      return this._api('post', 'sensors', data, next);
    },
    updateSensor: function(id, data, next) {
      return this._api('put', 'sensors/' + id, data, next);
    },
    deleteSensor: function(id, data, next) {
      return this._api('delete', 'sensors/' + id, data, next);
    },
    sensorsFind: function(namespace, data, next) {
      return this._api('post', 'sensors/find?namespace=' + namespace, data, next);
    },
    sensorData: function(id, data, next) {
      return this._api('get', 'sensors/' + id + '/data', data, next);
    },
    createSensorData: function(id, data, next) {
      return this._api('post', 'sensors/' + id + '/data', data, next);
    },
    createSensorsData: function(data, next) {
      return this._api('post', 'sensors/data', data, next);
    },
    deleteSensorData: function(id, data_id, data, next) {
      return this._api('delete', 'sensors/' + id + '/data/' + data_id, next);
    },
    sensorEnvironments: function(id, data, next) {
      return this._api('get', 'sensors/' + id + '/environment', data, next);
    },
    sensorDevice: function(id, data, next) {
      return this._api('get', 'sensors/' + id + '/device', data, next);
    },
    createSensorDevice: function(id, data, next) {
      return this._api('post', 'sensors/' + id + '/device', data, next);
    },
    deleteSensorDevice: function(id, data, next) {
      return this._api('delete', 'sensors/' + id + '/device', data, next);
    },
    sensorsAvailableServices: function(data, next) {
      return this._api('get', 'sensors/services/available', data, next);
    },
    sensorRunningServices: function(id, data, next) {
      return this._api('get', 'sensors/' + id + '/services', data, next);
    },
    sensorAvailableServices: function(id, data, next) {
      return this._api('get', 'sensors/' + id + '/services/available', data, next);
    },
    createSensorService: function(id, data, next) {
      return this._api('post', 'sensors/' + id + '/services', data, next);
    },
    deleteSensorService: function(id, service, next) {
      return this._api('delete', 'sensors/' + id + '/services/' + service, next);
    },
    sensorServiceMethods: function(id, service, next) {
      return this._api('get', 'sensors/' + id + '/services/' + service + '/methods', data, next);
    },
    sensorServiceLearn: function(id, service, data, next) {
      return this._api('post', 'sensors/' + id + '/services/' + service + '/manualLearn', data, next);
    },
    sensorServiceMethod: function(id, service, method, next) {
      return this._api('get', 'sensors/' + id + '/services/' + service + '/' + method, next);
    },
    createSensorServiceMethod: function(id, service, method, data, next) {
      return this._api('post', 'sensors/' + id + '/services/' + service + '/' + method, data, next);
    },
    sensorsMetatags: function(data, next) {
      return this._api('get', 'sensors/metatags', data, next);
    },
    sensorMetatags: function(id, data, next) {
      return this._api('get', 'sensors/' + id + '/metatags', data, next);
    },
    createSensorMetatags: function(id, data, next) {
      return this._api('post', 'sensors/' + id + '/metatags', data, next);
    },
    updateSensorMetatags: function(id, data, next) {
      return this._api('put', 'sensors/' + id + '/metatags', data, next);
    },
    deleteSensorMetaTags: function(id, data, next) {
      return this._api('delete', 'sensors/' + id + '/metatags', data, next);
    },
    currentUser: function(data, next) {
      return this._api('get', 'users/current', data, next);
    },
    users: function(data, next) {
      return this._api('get', 'users', data, next);
    },
    user: function(id, data, next) {
      return this._api('get', 'users/' + id, data, next);
    },
    createUser: function(data, next) {
      return this._api('post', 'users', data, next);
    },
    updateUser: function(id, data, next) {
      return this._api('put', 'users/' + id, data, next);
    },
    deleteUser: function(id, data, next) {
      return this._api('delete', 'users/' + id, data, next);
    }
  };

  if (typeof module === 'undefined') {
    window['Sense'] = Sense;
  } else {
    module.exports = exports = Sense;
  }

}).call(this);
